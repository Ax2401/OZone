Ins	Hex		Cmd		Bits	Description
MOV
	88		Copy	8		register to memory address
	89		Copy	16/32	register to memory address
	8A		Copy	8		memory address to register
	8B		Copy	16/32	memory address to register
	B0		Copy	8		value to register
	B8		Copy	16/32	value to register
	C6		Copy	8		value to address
	C7		Copy	16/32	value to address
	
	8C		Copy	16		segment register to memory address
	8E		Copy	16		memory address to segment register

CMP
	3C		Compare	8		value with AL
	3D		Compare 16/32	value with AX (EAX)
	80		Compare	8		value with Memory Address
	81		Compare 16/32	value with Memory Address
	83		Compare	8		value with 16/32 bit Memory Address 
	38		Compare	8		register with Memory Address
	39		Compare	16/32	register with Memory Address
	3A		Compare 8		Memory Address with register
	3B		Compare 16/32	Memory Address with register		

JMP
	EB		Jump	8		jump to relative address
	E9		Jump	16/32	jump to relative address
	FF		Jump	16/32	jump to absolute address
	EA		Jump	16/32	far jump to absolute address
	
	E3		JumpIf	8		jump to relative address if CX = 0
	
	70		JumpIf	8		OF=1 (Overflow)
	71		JumpIf	8		OF=0 (Not Overflow)
	72		JumpIf	8		CF=1 (Carry, Below, Not Above or Equal)
	73		JumpIf	8		CF=0 (Not Carry, Not Below,  Above or Equal)
	74		JumpIf	8		ZF=1 (Equal, Zero)
	75		JumpIf	8		ZF=0 (Not Equal, Not Zero)
	76		JumpIf	8		CF=1 or ZF=1 (Below or Equal, Not Above)
	77		JumpIf	8		CF=0 and ZF=0 (Not Below or Equal, Above)
	78		JumpIf	8		SF=1 (Sign)
	79		JumpIf	8		SF=0 (Not Sign)
	7A		JumpIf	8		PF=1 (Parity Even)
	7B		JumpIf	8		PF=0 (Parity Odd)
	7C		JumpIf	8		SF!=OF (Not Greater or Equal)
	7D		JumpIf	8		SF=0F (Not Less)
	7E		JumpIf	8		ZF=1 or SF!=OF (Not Greater)
	7F		JumpIf	8		ZF=0 and SF=OF (Not Less or Equal)

LEA
	8D		Address	16/32	Compute effective address
	
INT
	CC		Int3			Debug
	CD		Int		8		Jump to interrupt
	CE		Int4			Overflow

PUSH
	FF		Push	16/32	memory address to stack
	06		Push ES	16		ES to stack
	6A		Push	8		value to stack
	68		Push	16/32	value to stack
	
POP
	8F		Pop		16/32	stack to memory address
	07		Pop ES	16		stack to ES

INC
	FE		Inc		8		Increment address by 1
	FF		Inc		16/32	Increment address by 1

ADD
	80		Add		8		Add value to address
	81		Add		16/32	Add value to address
	83		Add		8		Add value to 16-bit address
	84		Add		8		Add value to 32-bit address
	00		Add		8		Add register to address
	01		Add		16/32	Add register to address
	02		Add		8		Add address to register
	03		Add		16/32	Add address to register

RET
	C3		Ret				Return to caller
	
HLT
	F4		Halt			Halt processing