AMLCode := DefBlockHeader TermList
DefBlockHeader := TableSignature TableLength SpecCompliance CheckSum OemID
OemTableID OemRevision CreatorID CreatorRevision
TableSignature := DWordData // As defined in section 5.2.3.
TableLength := DWordData // Length of the table in bytes including
// the block header.
SpecCompliance := ByteData // The revision of the structure.
CheckSum := ByteData // Byte checksum of the entire table.
OemID := ByteData(6) // OEM ID of up to 6 characters. If the OEM
// ID is shorter than 6 characters, it
// can be terminated with a NULL
// character.
OemTableID := ByteData(8) // OEM Table ID of up to 8 characters. If
// the OEM Table ID is shorter than 8
// characters, it can be terminated with
// a NULL character.
OemRevision := DWordData // OEM Table Revision.
CreatorID := DWordData // Vendor ID of the ASL compiler.
CreatorRevision := DWordData // Revision of the ASL compiler.


Name Objects Encoding

LeadNameChar := ‘A’-‘Z’ | ‘_’
DigitChar := ‘0’-‘9’
NameChar := DigitChar | LeadNameChar
RootChar := ‘\’
ParentPrefixChar := ‘^’
‘A’-‘Z’ := 0x41 - 0x5A
‘_’ := 0x5F
‘0’-‘9’ := 0x30 - 0x39
‘\’ := 0x5C
‘^’ := 0x5E
NameSeg := <LeadNameChar NameChar NameChar NameChar>
// Notice that NameSegs shorter than 4 characters are filled with
// trailing underscores (‘_’s).
NameString := <RootChar NamePath> | <PrefixPath NamePath>
PrefixPath := Nothing | <‘^’ PrefixPath>
NamePath := NameSeg | DualNamePath | MultiNamePath | NullName
DualNamePath := DualNamePrefix NameSeg NameSeg
DualNamePrefix := 0x2E
MultiNamePath := MultiNamePrefix SegCount NameSeg(SegCount)
MultiNamePrefix := 0x2F
SegCount := ByteData
Note: SegCount can be from 1 to 255. For example: MultiNamePrefix(35) is encoded as 0x2f 0x23 and
followed by 35 NameSegs. So, the total encoding length will be 1 + 1 + 35*4 = 142. Notice that:
DualNamePrefix NameSeg NameSeg has a smaller encoding than the encoding of:
MultiNamePrefix(2) NameSeg NameSeg
SimpleName := NameString | ArgObj | LocalObj
SuperName := SimpleName | DebugObj | Type6Opcode
NullName := 0x00
Target := SuperName | NullName


Data Objects Encoding

ComputationalData := ByteConst | WordConst | DWordConst | QWordConst | String |
ConstObj | RevisionOp | DefBuffer
DataObject := ComputationalData | DefPackage | DefVarPackage
DataRefObject := DataObject | ObjectReference | DDBHandle
ByteConst := BytePrefix ByteData
BytePrefix := 0x0A
WordConst := WordPrefix WordData
WordPrefix := 0x0B
DWordConst := DWordPrefix DWordData
DWordPrefix := 0x0C
QWordConst := QWordPrefix QWordData
QWordPrefix := 0x0E
String := StringPrefix AsciiCharList NullChar
StringPrefix := 0x0D
ConstObj := ZeroOp | OneOp | OnesOp
ByteList := Nothing | <ByteData ByteList>
ByteData := 0x00 - 0xFF
WordData := ByteData[0:7] ByteData[8:15] // 0x0000-0xFFFF
DWordData := WordData[0:15] WordData[16:31] // 0x00000000-0xFFFFFFFF
QWordData := DWordData[0:31] DWordData[32:63] // 0x0000000000000000-0xFFFFFFFFFFFFFFFF
AsciiCharList := Nothing | <AsciiChar AsciiCharList>
AsciiChar := 0x01 - 0x7F
NullChar := 0x00
ZeroOp := 0x00
OneOp := 0x01
OnesOp := 0xFF
RevisionOp := ExtOpPrefix 0x30
ExtOpPrefix := 0x5B


Package Length Encoding

PkgLength := PkgLeadByte |
<PkgLeadByte ByteData> |
<PkgLeadByte ByteData ByteData> |
<PkgLeadByte ByteData ByteData ByteData>
PkgLeadByte := <bit 7-6: ByteData count that follows (0-3)>
<bit 5-4: Only used if PkgLength < 63>
<bit 3-0: Least significant package length nybble>
Note: The high 2 bits of the first byte reveal how many follow bytes are in the PkgLength. If the
PkgLength has only one byte, bit 0 through 5 are used to encode the package length (in other
words, values 0-63). If the package length value is more than 63, more than one byte must be
used for the encoding in which case bit 4 and 5 of the PkgLeadByte are reserved and must be
zero. If the multiple bytes encoding is used, bits 0-3 of the PkgLeadByte become the least
significant 4 bits of the resulting package length value. The next ByteData will become the next
least significant 8 bits of the resulting value and so on, up to 3 ByteData bytes. Thus, the maximum
package length is 2**28.


Term Objects Encoding

TermObj := NameSpaceModifierObj | NamedObj | Type1Opcode | Type2Opcode
TermList := Nothing | <TermObj TermList>
TermArg := Type2Opcode | DataObject | ArgObj | LocalObj
UserTermObj := NameString TermArgList
TermArgList := Nothing | <TermArg TermArgList>
ObjectList := Nothing | <Object ObjectList>
Object := NameSpaceModifierObj | NamedObj


Namespace Modifier Objects Encoding

NameSpaceModifierObj := DefAlias | DefName | DefScope
DefAlias := AliasOp NameString NameString
AliasOp := 0x06
DefName := NameOp NameString DataRefObject
NameOp := 0x08
DefScope := ScopeOp PkgLength NameString TermList
ScopeOp := 0x10


Named Objects Encoding

NamedObj := DefBankField | DefCreateBitField | DefCreateByteField | DefCreateDWordField |
DefCreateField | DefCreateQWordField |DefCreateWordField | DefDataRegion |
DefOpRegion | DefPowerRes | DefProcessor | DefThermalZone
DefBankField := BankFieldOp PkgLength NameString NameString BankValue FieldFlags FieldList
BankFieldOp := ExtOpPrefix 0x87
BankValue := TermArg => Integer
FieldFlags := ByteData // bit 0-3: AccessType
// 0 AnyAcc
// 1 ByteAcc
// 2 WordAcc
// 3 DWordAcc
// 4 QWordAcc
// 5 BufferAcc
// 6 Reserved
// 7-15 Reserved
// bit 4: LockRule
// 0 NoLock
// 1 Lock
// bit 5-6: UpdateRule
// 0 Preserve
// 1 WriteAsOnes
// 2 WriteAsZeros
// bit 7: Reserved (must be 0)
FieldList := Nothing | <FieldElement FieldList>
NamedField := NameSeg PkgLength
ReservedField := 0x00 PkgLength
AccessField := 0x01 AccessType AccessAttrib
AccessType := ByteData // Bits 0:3 - Same as AccessType bits of FieldFlags.
// Bits 4:5 - Reserved
// Bits 7:6 - 0 = AccessAttrib = Normal Access Attributes
// 1 = AccessAttrib = AttribBytes (x)
// 2 = AccessAttrib = AttribRawBytes (x)
// 3 = AccessAttrib = AttribRawProcessBytes (x)
//
// x' is encoded as bits 0:7 of the AccessAttrib byte.
AccessAttrib := ByteData // If AccessType is BufferAcc for the SMB or
// GPIO OpRegions, AccessAttrib can be one of
// the following values:
// 0x02 AttribQuick
// 0x04 AttribSendReceive
// 0x06 AttribByte
// 0x08 AttribWord
// 0x0A AttribBlock
// 0x0C AttribProcessCall
// 0x0D AttribBlockProcessCall
ConnectField := <0x02 NameString> | <0x02 BufferData>
DefCreateBitField := CreateBitFieldOp SourceBuff BitIndex NameString
CreateBitFieldOp := 0x8D
SourceBuff := TermArg => Buffer
BitIndex := TermArg => Integer
DefCreateByteField := CreateByteFieldOp SourceBuff ByteIndex NameString
CreateByteFieldOp := 0x8C
ByteIndex := TermArg => Integer
DefCreateDWordField := CreateDWordFieldOp SourceBuff ByteIndex NameString
CreateDWordFieldOp := 0x8A
DefCreateField := CreateFieldOp SourceBuff BitIndex NumBits NameString
CreateFieldOp := ExtOpPrefix 0x13
NumBits := TermArg => Integer
DefCreateQWordField := CreateQWordFieldOp SourceBuff ByteIndex NameString
CreateQWordFieldOp := 0x8F
DefCreateWordField := CreateWordFieldOp SourceBuff ByteIndex NameString
CreateWordFieldOp := 0x8B
DefDataRegion := DataRegionOp NameString TermArg TermArg TermArg
DataRegionOp := ExOpPrefix 0x88
DefDevice := DeviceOp PkgLength NameString ObjectList
DeviceOp := ExtOpPrefix 0x82
DefEvent := EventOp NameString
DefField := FieldOp PkgLength NameString FieldFlags FieldList
FieldOp := ExtOpPrefix 0x81
DefIndexField := IndexFieldOp PkgLength NameString NameString FieldFlags FieldList
IndexFieldOp := ExtOpPrefix 0x86
DefMethod := MethodOp PkgLength NameString MethodFlags TermList
MethodOp := 0x14
MethodFlags := ByteData // bit 0-2: ArgCount (0-7)
// bit 3: SerializeFlag
// 0 NotSerialized
// 1 Serialized
// bit 4-7: SyncLevel (0x00-0x0f)
DefMutex := MutexOp NameString SyncFlags
MutexOp := ExtOpPrefix 0x01
SyncFlags := ByteData // bit 0-3: SyncLevel (0x00-0x0f)
// bit 4-7: Reserved (must be 0)
DefOpRegion := OpRegionOp NameString RegionSpace RegionOffset RegionLen
OpRegionOp := ExtOpPrefix 0x80
RegionSpace := ByteData // 0x00 SystemMemory
// 0x01 SystemIO
// 0x02 PCI_Config
// 0x03 EmbeddedControl
// 0x04 SMBus
// 0x05 CMOS
// 0x06 PciBarTarget
// 0x07 IPMI
// 0x80-0xFF: User Defined
RegionOffset := TermArg => Integer
RegionLen := TermArg => Integer
DefPowerRes := PowerResOp PkgLength NameString SystemLevel ResourceOrder ObjectList
PowerResOp := ExtOpPrefix 0x84
SystemLevel := ByteData
ResourceOrder := WordData
DefProcessor := ProcessorOp PkgLength NameString ProcID PblkAddr PblkLen ObjectList
ProcessorOp := ExtOpPrefix 0x83
ProcID := ByteData
PblkAddr := DWordData
PblkLen := ByteData
DefThermalZone := ThermalZoneOp PkgLength NameString ObjectList
ThermalZoneOp := ExtOpPrefix 0x85
ExtendedAccessField := 0x03 AccessType ExtendedAccessAttrib AccessLength
ExtendedAccessAttrib := ByteData // 0x0B AttribBytes
// 0x0E AttribRawBytes
// 0x0F AttribRawProcess
FieldElement := NamedField | ReservedField | AccessField | ExtendedAccessField |
ConnectField
RegionSpace := ByteData // 0x00 SystemMemory
// 0x01 SystemIO
// 0x02 PCI_Config
// 0x03 EmbeddedControl
// 0x04 SMBus
// 0x05 CMOS
// 0x06 PciBarTarget
// 0x07 IPMI
// 0x08 GeneralPurposeIO
// 0x09 GenericSerialBus
// 0x80-0xFF: User Defined

Type1Opcode := DefBreak | DefBreakPoint | DefContinue | DefFatal | DefIfElse |
DefLoad | DefNoop | DefNotify | DefRelease | DefReset | DefReturn |
DefSignal | DefSleep | DefStall | DefUnload | DefWhile
DefBreak := BreakOp
BreakOp := 0xA5
DefBreakPoint := BreakPointOp
BreakPointOp := 0xCC
DefContinue := ContinueOp
ContinueOp := 0x9F
DefElse := Nothing | <ElseOp PkgLength TermList>
ElseOp := 0xA1
DefFatal := FatalOp FatalType FatalCode FatalArg
FatalOp := ExtOpPrefix 0x32
FatalType := ByteData
FatalCode := DWordData
FatalArg := TermArg => Integer
DefIfElse := IfOp PkgLength Predicate TermList DefElse
IfOp := 0xA0
Predicate := TermArg => Integer
DefLoad := LoadOp NameString DDBHandleObject
LoadOp := ExtOpPrefix 0x20
DDBHandleObject := SuperName
DefNoop := NoopOp
NoopOp := 0xA3
DefNotify := NotifyOp NotifyObject NotifyValue
NotifyOp := 0x86
NotifyObject := SuperName => ThermalZone | Processor | Device
NotifyValue := TermArg => Integer
DefRelease := ReleaseOp MutexObject
ReleaseOp := ExtOpPrefix 0x27
MutexObject := SuperName
DefReset := ResetOp EventObject
ResetOp := ExtOpPrefix 0x26
EventObject := SuperName
DefReturn := ReturnOp ArgObject
ReturnOp := 0xA4
ArgObject := TermArg => DataRefObject
DefSignal := SignalOp EventObject
SignalOp := ExtOpPrefix 0x24
DefSleep := SleepOp MsecTime
SleepOp := ExtOpPrefix 0x22
MsecTime := TermArg => Integer
DefStall := StallOp UsecTime
StallOp := ExtOpPrefix 0x21
UsecTime := TermArg => ByteData
DefUnload := UnloadOp DDBHandleObject
UnloadOp := ExtOpPrefix 0x2A
DefWhile := WhileOp PkgLength Predicate TermList
WhileOp := 0xA2

Type2Opcode := DefAcquire | DefAdd | DefAnd | DefBuffer | DefConcat |
DefConcatRes | DefCondRefOf | DefCopyObject | DefDecrement |
DefDerefOf | DefDivide | DefFindSetLeftBit | DefFindSetRightBit |
DefFromBCD | DefIncrement | DefIndex | DefLAnd | DefLEqual |
DefLGreater | DefLGreaterEqual | DefLLess | DefLLessEqual | DefMid |
DefLNot | DefLNotEqual | DefLoadTable | DefLOr | DefMatch | DefMod |
DefMultiply | DefNAnd | DefNOr | DefNot | DefObjectType | DefOr |
DefPackage | DefVarPackage | DefRefOf | DefShiftLeft | DefShiftRight |
DefSizeOf | DefStore | DefSubtract | DefTimer | DefToBCD | DefToBuffer |
DefToDecimalString | DefToHexString | DefToInteger | DefToString |
DefWait | DefXOr | UserTermObj

Type6Opcode := DefRefOf | DefDerefOf | DefIndex | UserTermObj

DefAcquire := AcquireOp MutexObject Timeout
AcquireOp := ExtOpPrefix 0x23
Timeout := WordData
DefAdd := AddOp Operand Operand Target
AddOp := 0x72
Operand := TermArg => Integer
DefAnd := AndOp Operand Operand Target
AndOp := 0x7B
DefBuffer := BufferOp PkgLength BufferSize ByteList
BufferOp := 0x11
BufferSize := TermArg => Integer
DefConcat := ConcatOp Data Data Target
ConcatOp := 0x73
Data := TermArg => ComputationalData
DefConcatRes := ConcatResOp BufData BufData Target
ConcatResOp := 0x84
BufData := TermArg => Buffer
DefCondRefOf := CondRefOfOp SuperName Target
CondRefOfOp := ExtOpPrefix 0x12
DefCopyObject := CopyObjectOp TermArg SimpleName
CopyObjectOp := 0x9D
DefDecrement := DecrementOp SuperName
DecrementOp := 0x76
DefDerefOf := DerefOfOp ObjReference
DerefOfOp := 0x83
ObjReference := TermArg => ObjectReference | String
DefDivide := DivideOp Dividend Divisor Remainder Quotient
DivideOp := 0x78
Dividend := TermArg => Integer
Divisor := TermArg => Integer
Remainder := Target
Quotient := Target
DefFindSetLeftBit := FindSetLeftBitOp Operand Target
FindSetLeftBitOp := 0x81
DefFindSetRightBit := FindSetRightBitOp Operand Target
FindSetRightBitOp := 0x82
DefFromBCD := FromBCDOp BCDValue Target
FromBCDOp := ExtOpPrefix 0x28
BCDValue := TermArg => Integer
DefIncrement := IncrementOp SuperName
IncrementOp := 0x75
DefIndex := IndexOp BuffPkgStrObj IndexValue Target
IndexOp := 0x88
BuffPkgStrObj := TermArg => Buffer, Package or String
IndexValue := TermArg => Integer
DefLAnd := LandOp Operand Operand
LandOp := 0x90
DefLEqual := LequalOp Operand Operand
LequalOp := 0x93
DefLGreater := LgreaterOp Operand Operand
LgreaterOp := 0x94
DefLGreaterEqual := LgreaterEqualOp Operand Operand
LgreaterEqualOp := LnotOp LlessOp
DefLLess := LlessOp Operand Operand
LlessOp := 0x95
DefLLessEqual := LlessEqualOp Operand Operand
LlessEqualOp := LnotOp LgreaterOp
DefLNot := LnotOp Operand
LnotOp := 0x92
DefLNotEqual := LnotEqualOp Operand Operand
LnotEqualOp := LnotOp LequalOp
DefLoadTable := LoadTableOp TermArg TermArg TermArg TermArg TermArg TermArg
LoadTableOp := ExtOpPrefix 0x1F
DefLOr := LorOp Operand Operand
LorOp := 0x91
DefMatch := MatchOp SearchPkg MatchOpcode Operand MatchOpcode Operand StartIndex
MatchOp := 0x89
SearchPkg := TermArg => Package
MatchOpcode := ByteData // 0 MTR  1 MEQ  2 MLE  3 MLT  4 MGE  5 MGT
StartIndex := TermArg => Integer
DefMid := MidOp MidObj TermArg TermArg Target
MidOp := 0x9E
MidObj := TermArg => Buffer | String
DefMod := ModOp Dividend Divisor Target
ModOp := 0x85
DefMultiply := MultiplyOp Operand Operand Target
MultiplyOp := 0x77
DefNAnd := NandOp Operand Operand Target
NandOp := 0x7C
DefNOr := NorOp Operand Operand Target
NorOp := 0x7E
DefNot := NotOp Operand Target
NotOp := 0x80
DefObjectType := ObjectTypeOp SuperName
ObjectTypeOp := 0x8E
DefOr := OrOp Operand Operand Target
OrOp := 0x7D
DefPackage := PackageOp PkgLength NumElements PackageElementList
PackageOp := 0x12
DefVarPackage := VarPackageOp PkgLength VarNumElements PackageElementList
VarPackageOp := 0x13
NumElements := ByteData
VarNumElements := TermArg => Integer
PackageElementList := Nothing | <PackageElement PackageElementList>
PackageElement := DataRefObject | NameString
DefRefOf := RefOfOp SuperName
RefOfOp := 0x71
DefShiftLeft := ShiftLeftOp Operand ShiftCount Target
ShiftLeftOp := 0x79
ShiftCount := TermArg => Integer
DefShiftRight := ShiftRightOp Operand ShiftCount Target
ShiftRightOp := 0x7A
DefSizeOf := SizeOfOp SuperName
SizeOfOp := 0x87
DefStore := StoreOp TermArg SuperName
StoreOp := 0x70
DefSubtract := SubtractOp Operand Operand Target
SubtractOp := 0x74
DefTimer := TimerOp
TimerOp := 0x5B 0x33
DefToBCD := ToBCDOp Operand Target
ToBCDOp := ExtOpPrefix 0x29
DefToBuffer := ToBufferOp Operand Target
ToBufferOp := 0x96
DefToDecimalString := ToDecimalStringOp Operand Target
ToDecimalStringOp := 0x97
DefToHexString := ToHexStringOp Operand Target
ToHexStringOp := 0x98
DefToInteger := ToIntegerOp Operand Target
ToIntegerOp := 0x99
DefToString := ToStringOp TermArg LengthArg Target
LengthArg := TermArg => Integer
ToStringOp := 0x9C
DefWait := WaitOp EventObject Operand
WaitOp := ExtOpPrefix 0x25
DefXOr := XorOp Operand Operand Target
XorOp := 0x7F


Arg Objects Encoding

ArgObj := Arg0Op | Arg1Op | Arg2Op | Arg3Op | Arg4Op | Arg5Op | Arg6Op
Arg0Op := 0x68
Arg1Op := 0x69
Arg2Op := 0x6A
Arg3Op := 0x6B
Arg4Op := 0x6C
Arg5Op := 0x6D
Arg6Op := 0x6E


Local Objects Encoding

LocalObj := Local0Op | Local1Op | Local2Op | Local3Op | Local4Op | Local5Op | Local6Op | Local7Op
Local0Op := 0x60
Local1Op := 0x61
Local2Op := 0x62
Local3Op := 0x63
Local4Op := 0x64
Local5Op := 0x65
Local6Op := 0x66
Local7Op := 0x67


Debug Objects Encoding

DebugObj := DebugOp
DebugOp := ExtOpPrefix 0x31