<?xml version="1.0" encoding="utf-8" ?>

<cls:class
	name="UhciUsbPort"
	type="http://metalx.org/Usb/Uhci/UhciUsbPort"
	xmlns="http://metalx.org/Program"
	xmlns:cls="http://metalx.org/Class"
	xmlns:var="http://metalx.org/Variable"
	xmlns:clsf="http://metalx.org/i386/Functions/Class"
	xmlns:date="http://metalx.org/i386/Functions/Date"
	xmlns:time="http://metalx.org/i386/Functions/Time"
	xmlns:clk="http://metalx.org/i386/Functions/Clock"
	xmlns:obj="http://metalx.org/i386/Functions/Object"
	xmlns:sys="http://metalx.org/i386/Functions/System"
	xmlns:cat="http://metalx.org/i386/Functions/Catalog"
	xmlns:str="http://metalx.org/i386/Functions/String"
	xmlns:int="http://metalx.org/i386/Functions/Integer"
	xmlns:bool="http://metalx.org/i386/Functions/Boolean"
	xmlns:lst="http://metalx.org/i386/Functions/List"
	xmlns:pcif="http://metalx.org/i386/Functions/Pci"
	xmlns:hex="http://metalx.org/i386/Functions/Hexadecimal"
	xmlns:mm="http://metalx.org/i386/Functions/MemoryManager"
	xmlns:cpu="http://metalx.org/Intel/80386/Operators"
	xmlns:op="http://metalx.org/Intel/80386/Operands"
	xmlns:math="http://metalx.org/Intel/80386/Math"
	xmlns:ari="http://metalx.org/Intel/80386/Arithmetic"
	xmlns:shift="http://metalx.org/Intel/80386/Shift"
	xmlns:imm="http://metalx.org/Intel/80386/Immediate"
	xmlns:usb="http://metalx.org/Usb/Ohci/Registers"
	xmlns:pci="http://metalx.org/Pc/Pci/Ports"
	xmlns:cfg="http://metalx.org/Pc/Pci/Configuration">

	<cls:field name="Device" type="http://metalx.org/Pci/PciDevice" offset="0"/>
	<cls:field name="Port" type="http://metalx.org/Integer" offset="4"/>

	<cls:method name="GetDevice" type="http://metalx.org/Usb/Uhci/UhciUsbDevice">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:PushAXToStack/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<pcif:GetBaseAddress4/>

		<cpu:AndALWithImmediate/>
		<binary>11111100</binary>

		<cpu:AddImmediateToAL/>
		<hex>10</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyImmediateToAX/>
		<int>2</int>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:CX-DXRegister/>
		
		<!--Reset Port-->
		<cpu:Operand16/>
		<cpu:CopyImmediateToAX/>
		<hex>0284</hex>

		<cpu:Operand16/>
		<cpu:WriteAXToDXPort/>
		
		<cpu:Operand16/>
		<cpu:CopyImmediateToAX/>
		<hex>0084</hex>

		<cpu:Operand16/>
		<cpu:WriteAXToDXPort/>
		
		<!--Wait For Port Reset-->
		
		<!--Set Device Address (1)-->
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00830000</hex>
		<hex>00</hex>
		<hex>05</hex>
		<hex>0001</hex>
		
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00830004</hex>
		<hex>00000000</hex>

		<!--Create Queue Descriptor-->
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00820000</hex>
		<hex>00820000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00820004</hex>
		<hex>00810000</hex>

		<!--Create Setup Transfer Descriptor-->
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810000</hex>
		<hex>00810010</hex>
		<!--<hex>00810000</hex>-->
		<!--<hex>00000001</hex>-->

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810004</hex>
		<hex>00800000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810008</hex>
		<hex>00E0002D</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>0081000c</hex>
		<hex>00830000</hex>

		<!--Create Status Transfer Descriptor-->
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810010</hex>
		<!--<hex>00810000</hex>-->
		<hex>00000001</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810014</hex>
		<hex>00800000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810018</hex>
		<hex>ffe00069</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>0081001c</hex>
		<hex>00000000</hex>

		<!--Create Result Transfer Descriptor-->
		<!--<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810010</hex>
		<hex>00810020</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810014</hex>
		<hex>00000000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810018</hex>
		<hex>00810020</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>0081001c</hex>
		<hex>00000000</hex>-->

		<!--Create Terminator Transfer Descriptor-->
		<!--<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810020</hex>
		<hex>00000001</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810024</hex>
		<hex>00000000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00810028</hex>
		<hex>00000000</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>0081002c</hex>
		<hex>00000000</hex>-->

		<!--Queue Descriptors-->
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToImmediateAddress/>
		<hex>00800000</hex>
		<hex>00820002</hex>
		
		<!--Wait For Data-->
		<label id="waitForData"/>
		
		<cpu:CopyAbsoluteMemoryToAX/>
		<hex>00810014</hex>

		<cpu:TestAXWithImmediate/>
		<hex>00800000</hex>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="waitForData" type="Relative8"/>

		<!--Save Address-->
		<cpu:PushImmediateToStack/>
		<int>1</int>

		<!--Create Device-->
		<mm:CheckOut length="8"/>
		
		<cpu:PullAXFromStack/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-DIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:PullAXFromStack/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-DIAddress/>

		<cpu:PushDIToStack/>
		
		<!--Find Class-->
		<sys:GetCatalog/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="uhciUsbDevice" type="Absolute32"/>

		<cat:FindType/>

		<!--Create Object-->
		<cpu:PullDIFromStack/>

		<cpu:CopyImmediateToAX/>
		<int>8</int>

		<cpu:CopyRegisterToOperand/>
		<op:SI-BXRegister/>

		<obj:Create/>

		<cpu:ReturnToNearCaller/>
		
		<var:string id="uhciUsbDevice">http://metalx.org/Usb/Uhci/UhciUsbDevice</var:string>
	</cls:method>
	
	<cls:method name="GetStatus" type="http://metalx.org/Hexadecimal">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<pcif:GetBaseAddress4/>

		<cpu:AndALWithImmediate/>
		<binary>11111100</binary>

		<cpu:AddImmediateToAL/>
		<hex>10</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyImmediateToAX/>
		<int>2</int>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:CX-DXRegister/>

		<cpu:CopyImmediateToAX/>
		<int>0</int>

		<cpu:Operand16/>
		<cpu:ReadFromDXPortToAX/>

		<hex:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="IsConnected" type="http://metalx.org/Boolean">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<pcif:GetBaseAddress4/>

		<cpu:AndALWithImmediate/>
		<binary>11111100</binary>

		<cpu:AddImmediateToAL/>
		<hex>10</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyImmediateToAX/>
		<int>2</int>
		
		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:CX-DXRegister/>

		<cpu:Operand16/>
		<cpu:ReadFromDXPortToAX/>

		<cpu:AndALWithImmediate/>
		<binary>00000001</binary>

		<bool:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="IsEnabled" type="http://metalx.org/String">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<pcif:GetBaseAddress4/>

		<cpu:AndALWithImmediate/>
		<binary>11111100</binary>

		<cpu:AddImmediateToAL/>
		<hex>10</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyImmediateToAX/>
		<int>2</int>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddRegisterToOperand/>
		<op:AX-CXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:CX-DXRegister/>

		<cpu:Operand16/>
		<cpu:ReadFromDXPortToAX/>

		<cpu:ShiftRegisterByImmediateFunction8/>
		<shift:ShiftALRegisterRight/>
		<byte>2</byte>

		<cpu:AndALWithImmediate/>
		<binary>00000001</binary>

		<bool:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="ToString" type="http://metalx.org/String">
		<cpu:CopyImmediateToDI/>
		<addressOf ref="deviceName" type="Absolute32"/>

		<str:CreateObject/>

		<cpu:ReturnToNearCaller/>

		<var:string id="deviceName">Universal Serial Bus 1.0 Controller Port (UHCI)</var:string>
	</cls:method>
	
	<cls:method name="GetClass" type="http://metalx.org/Class">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetType/>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<clsf:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>
</cls:class>