<?xml version="1.0" encoding="utf-8" ?>

<cls:class
	name="MeshRenderer"
	type="http://metalx.org/Video/Graphics/MeshRenderer"
	static="true"
	xmlns="http://metalx.org/Program"
	xmlns:cls="http://metalx.org/Class"
	xmlns:var="http://metalx.org/Variable"
	xmlns:clsf="http://metalx.org/i386/Functions/Class"
	xmlns:sys="http://metalx.org/i386/Functions/System"
	xmlns:cat="http://metalx.org/i386/Functions/Catalog"
	xmlns:obj="http://metalx.org/i386/Functions/Object"
	xmlns:mm="http://metalx.org/i386/Functions/MemoryManager"
	xmlns:bool="http://metalx.org/i386/Functions/Boolean"
	xmlns:str="http://metalx.org/i386/Functions/String"
	xmlns:int="http://metalx.org/i386/Functions/Integer"
	xmlns:hex="http://metalx.org/i386/Functions/Hexadecimal"
	xmlns:float="http://metalx.org/i386/Functions/Float"
	xmlns:matrix="http://metalx.org/i386/Functions/Matrix"
	xmlns:math="http://metalx.org/Intel/80386/Math"
	xmlns:ari="http://metalx.org/Intel/80386/Arithmetic"
	xmlns:shift="http://metalx.org/Intel/80386/Shift"
	xmlns:logic="http://metalx.org/Intel/80386/Logic"
	xmlns:imm="http://metalx.org/Intel/80386/Immediate"
	xmlns:inc="http://metalx.org/Intel/80386/Increment"
	xmlns:index="http://metalx.org/Intel/80386/Index"
	xmlns:fpu="http://metalx.org/Intel/80386/FpuOperators"
	xmlns:cpu="http://metalx.org/Intel/80386/Operators"
	xmlns:op="http://metalx.org/Intel/80386/Operands">

	<cls:field name="RenderTarget" type="http://metalx.org/Reference" offset="0"/>
	<cls:field name="PixelBuffer" type="http://metalx.org/Reference" offset="4"/>
	<cls:field name="DepthStencilBuffer" type="http://metalx.org/Reference" offset="8"/>
	<cls:field name="VertexBuffer" type="http://metalx.org/Reference" offset="12"/>
	<cls:field name="IndexBuffer" type="http://metalx.org/Reference" offset="16"/>
	<cls:field name="VertexShader" type="http://metalx.org/Reference" offset="20"/>
	<cls:field name="PixelShader" type="http://metalx.org/Reference" offset="24"/>
	<cls:field name="RenderTarget_DrawImage" type="http://metalx.org/Hexadecimal" offset="28"/>
	<cls:field name="PixelBuffer_SetColor" type="http://metalx.org/Hexadecimal" offset="32"/>
	<cls:field name="RenderTarget_DrawImage_Point" type="http://metalx.org/Reference" offset="36"/>
	<cls:field name="GeometryShader" type="http://metalx.org/Reference" offset="40"/>
	<cls:field name="VertexShader_GetVerteces" type="http://metalx.org/Hexadecimal" offset="44"/>
	<cls:field name="VertexShader_GetVerteces_Destination" type="http://metalx.org/Reference" offset="48"/>
	<cls:field name="Index" type="http://metalx.org/Reference" offset="52"/>
	<cls:field name="Count" type="http://metalx.org/Reference" offset="56"/>
	<cls:field name="PixelBuffer_SetColor_Black" type="http://metalx.org/Hexadecimal" offset="60"/>
	<cls:field name="Viewport" type="http://metalx.org/Video/Graphics/Viewport" offset="64"/>

	<cls:method name="Create" type="http://metalx.org/Video/Graphics/MeshRenderer" static="true">
		<cls:parameter name="PixelRenderer" type="http://metalx.org/Video/Graphics/PixelRenderer"/>

		<mm:CheckOut length="128"/>
		
		<cpu:PushDIToStack/>

		<!--Get Pixel Renderer-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddress/>

		<obj:Create length="128"/>

		<cpu:PushDIToStack/>
		
		<!--Find DrawImage Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<obj:GetType/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="drawImage" type="Absolute32"/>

		<clsf:FindMethod/>

		<clsf:GetMethodEntryPoint/>

		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddressPlusImmediate8/>
		<byte>28</byte>
		
		<!--Create Pixel Buffer-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>
		
		<obj:ExecuteMethod name="GetSize"/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:PushSIToStack/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:DX-DXRegister/>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddImmediateToAX/>
		<int>2</int>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterLeft/>
		<byte>2</byte>

		<mm:CheckOut/>

		<obj:Create type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PullSIFromStack/>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-AXAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:DI-DIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>

		<!--Find SetColor Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-AXAddressPlusImmediate8/>
		<byte>4</byte>
		
		<obj:GetType/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="setColor" type="Absolute32"/>

		<clsf:FindMethod/>

		<clsf:GetMethodEntryPoint/>
		
		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddressPlusImmediate8/>
		<byte>32</byte>

		<!--Create Point Object-->
		<mm:CheckOut length="8"/>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToDIAddress/>
		<int>0</int>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToDIAddressPlusImmediate8/>
		<byte>4</byte>
		<int>0</int>

		<obj:Create length="8" type="http://metalx.org/Video/Graphics/Point"/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>36</byte>

		<!--Create VertexBuffer Object-->
		<mm:CheckOut length="96"/>

		<obj:Create length="96" type="http://metalx.org/Object"/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>48</byte>

		<!--Create Index Object-->
		<cpu:CopyImmediateToAX/>
		<int>0</int>
		
		<int:CreateObject/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>52</byte>

		<!--Create Count Object-->
		<cpu:CopyImmediateToAX/>
		<int>3</int>

		<int:CreateObject/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>56</byte>

		<!--Create Color Object-->
		<cpu:CopyImmediateToAX/>
		<hex>ff000000</hex>

		<hex:CreateObject/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>60</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToSPRegister/>
		<byte>4</byte>

		<cls:return/>
	
		<var:string id="setColor">SetColor</var:string>
		<var:string id="drawImage">DrawImage</var:string>
	</cls:method>

	<cls:method name="Test" type="http://metalx.org/Video/Graphics/MeshRenderer">		
		<cpu:PushDIToStack/>
		
		<!--Create Vertex Shader-->
		<cpu:MathImmediateToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<hex>00000200</hex>
		
		<cpu:CopyRegisterToOperand/>
		<op:BP-DIRegister/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000100</hex>
		
		<matrix:Zero/>

		<obj:Create length="64" type="http://metalx.org/Video/Graphics/VertexShader"/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddress/>
		<index:SP/>
		
		<obj:GetData/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>20</byte>
		
		<!--Find GetVerteces Method-->		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>
		
		<obj:GetType/>
		
		<cpu:CopyImmediateToDI/>
		<addressOf ref="getVerteces" type="Absolute32"/>
		
		<clsf:FindMethod/>
		
		<clsf:GetMethodEntryPoint/>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddress/>
		<index:SP/>

		<obj:GetData/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>44</byte>
		
		<!--Create World Matrix-->
		<cpu:CopyRegisterToOperand/>
		<op:BP-DIRegister/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000140</hex>
		
		<matrix:Identity/>
		
		<!--Create View Matrix-->
		<cpu:CopyRegisterToOperand/>
		<op:BP-DIRegister/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000180</hex>
		
		<matrix:Identity/>
		
		<fpu:PushFloatAtImmediateAddressToST0/>
		<addressOf ref="centerX" type="Absolute32"/>
		
		<fpu:PushFloatAtImmediateAddressToST0/>
		<addressOf ref="centerY" type="Absolute32"/>
		
		<fpu:Zero/>
		
		<matrix:Translate/>

		<!--Create Vertex Buffer-->
		<cpu:CopyImmediateToDI/>
		<addressOf ref="verteces" type="Absolute32"/>
		
		<obj:Create length="96" type="http://metalx.org/Object"/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddress/>
		<index:SP/>
		
		<obj:GetData/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>12</byte>

		<cpu:CopyImmediateToCX/>
		<int>2000</int>
		
		<label id="forEachFrame"/>
		
		<cpu:PushCXToStack/>
		
		<!--Clear Pixel Buffer-->
		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>4</byte>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>60</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:LogicFunction/>
		<logic:CallSIAddressPlusImmediate8/>
		<byte>32</byte>
		
		<!--Update Rotation-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtImmediateAddressToST0/>
		<addressOf ref="rotation" type="Absolute32"/>
		
		<fpu:AddFloatAtImmediateAddressToST0/>
		<addressOf ref="speed" type="Absolute32"/>
		
		<fpu:CopyST0ToFloatAtImmediateAddress/>
		<addressOf ref="rotation" type="Absolute32"/>

		<cpu:WaitForFloatingPointUnit/>
		
		<!--Update World-->
		<cpu:CopyRegisterToOperand/>
		<op:BP-DIRegister/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000140</hex>
		
		<matrix:RotateZ/>

		<fpu:ResetFpu/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-AXRegister/>
		
		<!--Multply View-->
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000040</hex>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:SubtractFromDIRegister/>
		<hex>00000080</hex>

		<matrix:Multiply/>

		<fpu:ResetFpu/>

		<!--<cpu:CopyRegisterToOperand/>
		<op:BP-DIRegister/>

		<cpu:MathImmediateToOperandFunction/>
		<math:AddToDIRegister/>
		<hex>00000100</hex>
		
		<matrix:Identity/>-->
		
		<!--Get Source-->
		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<!--<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddress/>
		<index:SP/>-->
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>16</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>12</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>12</byte>
		
		<!--Get Destination-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>48</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>8</byte>
		
		<!--Get Index-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>52</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>4</byte>
		
		<!--Get Count-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>56</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>
		
		<!--Get Entry Point-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>44</byte>

		<!--Get VertexShader-->
		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>20</byte>
		
		<!--Transform Verteces-->
		<cpu:LogicFunction/>
		<logic:CallAXRegister/>
		
		<!--Get PixelBuffer-->
		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<!--<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddress/>
		<index:SP/>-->
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>
		
		<obj:GetData/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-SIAddressPlusImmediate8/>
		<byte>4</byte>
		
		<obj:GetData/>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000f4</hex>
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToSIRegister/>
		<byte>8</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-BPAddressPlusImmediate/>
		<hex>000000f0</hex>

		<!--Get VertexBuffer-->
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>
		
		<obj:GetData/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-SIAddressPlusImmediate8/>
		<byte>48</byte>
		
		<obj:GetData/>

		<cpu:CopyRegisterToOperand/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>00000010</hex>
		<int>0</int>
		
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>00000014</hex>
		<int>32</int>
		
		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>00000018</hex>
		<int>64</int>

		<cpu:CallRelative/>
		<addressOf ref="renderTriangle" type="Relative32"/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>

		<!--<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddress/>
		<index:SP/>-->

		<obj:ExecuteMethod name="Update"/>

		<cpu:PullCXFromStack/>

		<!--<cpu:DecrementCX/>-->

		<!--<cpu:BranchToRelative8IfZero/>
		<addressOf ref="done" type="Relative8"/>-->

		<cpu:JumpToRelative/>
		<addressOf ref="forEachFrame" type="Relative32"/>
		
		<label id="done"/>
		
		<cpu:MathImmediateToOperandFunction/>
		<math:AddToBPRegister/>
		<hex>00000200</hex>
		
		<cpu:PullDIFromStack/>

		<cls:return/>

		<label id="verteces">
			<float>0</float>
			<float>-5</float>
			<float>0.0</float>
			<float>0.0</float>
			<hex>ffff0000</hex>
			<float>0.5</float>
			<float>0.0</float>
			<hex>00000000</hex>
			
			<float>5</float>
			<float>5</float>
			<float>0.0</float>
			<float>0.0</float>
			<hex>0000ff00</hex>
			<float>1.0</float>
			<float>1.0</float>
			<hex>00000000</hex>
			
			<float>-5</float>
			<float>5</float>
			<float>0.0</float>
			<float>0.0</float>
			<hex>000000ff</hex>
			<float>0.0</float>
			<float>1.0</float>
			<hex>00000000</hex>
		</label>
	
		<var:string id="getVerteces">GetVerteces</var:string>
		<!--<var:float id="rotation">1.0499993563</var:float>-->
		<var:float id="rotation">1.1099992990</var:float>
		<var:float id="speed">0.001</var:float>
		<var:float id="centerX">40</var:float>
		<var:float id="centerY">12</var:float>

	</cls:method>

	<cls:method name="SetViewport" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Viewport" type="http://metalx.org/Video/Graphics/Viewport"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetRenderState" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="RenderState" type="http://metalx.org/Video/Graphics/RenderState"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetRenderStates" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="RenderStateList" type="http://metalx.org/Video/Graphics/RenderStateList"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTextureState" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="TextureState" type="http://metalx.org/Video/Graphics/TextureState"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTextureStates" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="TextureStateList" type="http://metalx.org/Video/Graphics/TextureStateList"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadTexture" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="texture" type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTexture" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="texture" type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadVertexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexBuffer" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetVertexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexBuffer" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData />

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>12</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadIndexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="indexBuffer" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetIndexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="indexBuffer" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData />

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadGeometryShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="geometryShader" type="http://metalx.org/Video/Graphics/GeometryShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetGeometryShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="geometryShader" type="http://metalx.org/Video/Graphics/GeometryShader"/>

		<cpu:PushDIToStack/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData />

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>40</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetGeometryShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadVertexShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexShader" type="http://metalx.org/Video/Graphics/VertexShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetVertexShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexShader" type="http://metalx.org/Video/Graphics/VertexShader"/>

		<cpu:PushDIToStack/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData />

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>20</byte>
		
		<!--Find GetVerteces Method-->
		<cpu:PushSIToStack/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>
		
		<obj:GetType/>
		
		<cpu:CopyImmediateToDI/>
		<addressOf ref="getVerteces" type="Absolute32"/>
		
		<clsf:FindMethod/>
		
		<clsf:GetMethodEntryPoint/>

		<cpu:PullDIFromStack/>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddressPlusImmediate8/>
		<byte>44</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>

		<var:string id="getVerteces">GetVerteces</var:string>
	</cls:method>

	<cls:method name="SetVertexShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadPixelShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="pixelShader" type="http://metalx.org/Video/Graphics/PixelShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetPixelShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="pixelShader" type="http://metalx.org/Video/Graphics/PixelShader"/>

		<cpu:PushDIToStack/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData />

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>24</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetPixelShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="RenderTriangles" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Offset" type="http://metalx.org/Integer"/>
		<cls:parameter name="Count" type="http://metalx.org/Integer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="Clear" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Color" type="http://metalx.org/Video/Graphics/Color"/>
		<cls:parameter name="Depth" type="http://metalx.org/Float"/>
		<cls:parameter name="Stencil" type="http://metalx.org/Integer"/>

		<cpu:PushDIToStack/>

		<!--Set Color-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>8</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:LogicFunction/>
		<logic:CallSIAddressPlusImmediate8/>
		<byte>32</byte>

		<!--Set Depth-->
		
		<!--Set Stencil-->
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>12</byte>

		<cpu:PullDIFromStack/>
		
		<cls:return/>
	</cls:method>

	<cls:method name="Update" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cpu:PushDIToStack/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>0</byte>
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>8</byte>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>36</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:LogicFunction/>
		<logic:CallSIAddressPlusImmediate8/>
		<byte>28</byte>

		<cpu:PullDIFromStack/>
		
		<cls:return/>
	</cls:method>

	<cls:method name="ToString" type="http://metalx.org/String">
		<cpu:CopyImmediateToDI/>
		<addressOf ref="className" type="Absolute32"/>

		<str:CreateObject/>

		<cpu:ReturnToNearCaller/>

		<var:string id="className">Mesh Renderer</var:string>
	</cls:method>

	<cls:method name="GetClass" type="http://metalx.org/Class">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetType/>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<clsf:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="GetClass" type="http://metalx.org/Class" static="true">
		<cpu:CopyRegisterToOperand/>
		<op:BX-DIRegister/>

		<clsf:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<label id="renderTriangle">
		<!--SortVertices (Index1, Index2)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<fpu:ResetFpu/>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotCarry/>
		<addressOf ref="skipSwap1" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<label id="skipSwap1"/>
		
		<!--SortVertices (Index2, Index3)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<fpu:ResetFpu/>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotCarry/>
		<addressOf ref="skipSwap2" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<label id="skipSwap2"/>
		
		<!--SortVertices (Index1, Index2)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<fpu:ResetFpu/>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotCarry/>
		<addressOf ref="skipSwap3" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<label id="skipSwap3"/>

		<!--Width = index3.x - index1.x-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<!--Height = index3.y - index1.y-->
		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>
		
		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>
		
		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>

		<cpu:WaitForFloatingPointUnit/>

		<!--Depth = index3.z - index1.z-->

		<!--Blue = index3.b - index1.b-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>50</hex>

		<!--Green = index3.g - index1.g-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>54</hex>

		<!--Red = index3.r - index1.r-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>58</hex>

		<!--Alpha = index3.a - index1.a-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>5c</hex>

		<!--if(Height != 0)-->
		
			<!--TopWidth = index2.x - index1.x-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>
		
			<!--TopHeight = index2.y - index1.y-->
		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>
		
		<cpu:WaitForFloatingPointUnit/>

		<!--TopBlue = index2.b - index1.b-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>60</hex>

		<!--TopGreen = index2.g - index1.g-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>64</hex>

		<!--TopRed = index2.r - index1.r-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>68</hex>

		<!--TopAlpha = index2.a - index1.a-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>6c</hex>
		
		<!--BottomWidth = index3.x - index2.x-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>0</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>

			<!--BottomHeight = index3.y - index2.y-->
		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<!--BottomBlue = index3.b - index2.b-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>16</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>70</hex>

		<!--BottomGreen = index3.g - index2.g-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>17</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>74</hex>

		<!--BottomRed = index3.r - index2.r-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>18</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>78</hex>

		<!--BottomAlpha = index3.a - index2.a-->
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:AX-AXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:AL-SIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyOperandToRegister8/>
		<op:BL-DIAddressPlusImmediate8/>
		<byte>19</byte>

		<cpu:SubtractRegisterFromOperand/>
		<op:BX-AXRegister/>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>7c</hex>
		
		<!--RightHanded = (TopWidth * Height) > (Width * TopHeight)-->		
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>

		<fpu:MultiplyST1ByST0AndIncrementST/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>

		<fpu:MultiplyST1ByST0AndIncrementST/>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfCarry/>
		<addressOf ref="rightHanded" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="leftHanded" type="Relative32"/>
		
			<!--if(RightHanded)-->
		<label id="rightHanded"/>
		
		<!--<bochs:Break xmlns:bochs="http://metalx.org/i386/Functions/Bochs"/>-->

				<!--Left = index1.x-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<!--<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>40</hex>-->
		
		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>0</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<cpu:WaitForFloatingPointUnit/>

				<!--LeftBGRA = index1.bgra-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>16</byte>	

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000080</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000084</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000088</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>0000008c</hex>
		
		<fpu:ResetFpu/>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<!--DeltaLeft = Width / Height-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
				<!--DeltaLeftBlue = Blue / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000050</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
				<!--DeltaLeftGreen = Green / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000054</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
				<!--DeltaLeftRed = Red / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000058</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
				
				<!--DeltaLeftAlpha = Alpha / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000005c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
				<!--if(TopHeight != 0)-->
					<!--DeltaRight = TopWidth / TopHeight-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:DivideST0ByST1/>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
					<!--Right = Left-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>
		
					<!--DeltaRightBlue = TopBlue / TopHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000060</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>		
		
					<!--DeltaRightGreen = TopGreen / TopHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000064</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>		
		
					<!--DeltaRightRed = TopRed / TopHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000068</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>		
		
					<!--DeltaRightAlpha = TopAlpha / TopHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000006c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>	
		
					<!--RightBlue = LeftBlue-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>
		
					<!--RightGreen = LeftGreen-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>
				
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>
		
					<!--RightRed = LeftRed-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>
				
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>
		
					<!--RightAlpha = LeftAlpha-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>
		
		<cpu:WaitForFloatingPointUnit/>
		
					<!--for row = index1.y to index2.y - 1-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:AddOperandToRegister/>
		<op:DI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000008</hex>
		
		<fpu:PushFloatAtDIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000000c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:CopyOperandToRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>0c</hex>
		
		<cpu:SubtractOperandFromRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:PushCXToStack/>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="forEachTopRow" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="skipDrawTop" type="Relative32"/>

		<label id="forEachTopRow"/>
						<!--FillTriangleRow(row, Left, Right)-->
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>
		
						<!--Left += DeltaLeft;-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>
		
						<!--Right += DeltaRight;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

						<!--LeftBlue += DeltaLeftBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

						<!--LeftGreen += DeltaLeftGreen;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

						<!--LeftRed += DeltaLeftRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

						<!--LeftAlpha += DeltaLeftAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
						<!--RightBlue += DeltaRightBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

						<!--RightGreen += DeltaRightGreen;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

						<!--RightRed += DeltaRightRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

						<!--RightAlpha += DeltaRightAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:IncrementFunction/>
		<inc:IncrementBPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:DecrementCX/>

		<cpu:BranchToRelative8IfZero/>
		<addressOf ref="skipDrawTop" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="forEachTopRow" type="Relative32"/>

		<label id="skipDrawTop"/>
		
				<!--if(Top == 0)-->
		<cpu:PullCXFromStack/>
		
		<cpu:BranchToRelative8IfCXIsZero/>
		<addressOf ref="setRight" type="Relative8"/>

		<cpu:JumpToRelative8/>
		<addressOf ref="drawRow" type="Relative8"/>
		
					<!--Right = index2.x-->
		<label id="setRight"/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<!--<cpu:CopyOperandToRegister/>
		<op:AX-AXAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>44</hex>-->
		
		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>0</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<cpu:WaitForFloatingPointUnit/>
		
				<!--FillTriangleRow(index2.y, Left, Right)-->
		<label id="drawRow"/>
		
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>

				<!--if(Bottom != 0)-->
					<!--DeltaRight = BottomWidth / BottomHeight-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
					<!--DeltaRightBlue = BottomBlue / BottomHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000070</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>		
		
					<!--DeltaRightGreen = BottomGreen / BottomHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000074</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>		
		
					<!--DeltaRightRed = BottomRed / BottomHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000078</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
		
					<!--DeltaRightAlpha = BottomAlpha / BottomHeight-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000007c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>	
		
		<cpu:WaitForFloatingPointUnit/>
		
					<!--for row = index2.y + 1 to index3.y-->		
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000000c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:CopyOperandToRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>0c</hex>
		
		<cpu:SubtractOperandFromRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="forEachBottomRow" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="skipDrawBottom" type="Relative32"/>
		
		<label id="forEachBottomRow"/>
		
						<!--Left += DeltaLeft;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>
		
						<!--Right += DeltaRight;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

						<!--LeftBlue += DeltaLeftBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

						<!--LeftGreen += DeltaLeftGreen;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

						<!--LeftRed += DeltaLeftRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

						<!--LeftAlpha += DeltaLeftAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
						<!--RightBlue += DeltaRightBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

						<!--RightGreen += DeltaRightGreen;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

						<!--RightRed += DeltaRightRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

						<!--RightAlpha += DeltaRightAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:IncrementFunction/>
		<inc:IncrementBPAddressPlusImmediate8/>
		<hex>08</hex>

						<!--FillTriangleRow(row, Left, Right)-->
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>

		<cpu:DecrementCX/>

		<cpu:BranchToRelative8IfZero/>
		<addressOf ref="skipDrawBottom" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="forEachBottomRow" type="Relative32"/>

		<label id="skipDrawBottom"/>
		
		<cpu:ReturnToNearCaller/>
	
			<!--else-->
		<label id="leftHanded"/>

				<!--Right = index1.x-->
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:AX-AXAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>44</hex>
		
				<!--RightBGRA = index1.bgra-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>16</byte>	

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:BX-BXRegister/>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000090</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000094</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>00000098</hex>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterRight/>
		<byte>8</byte>

		<cpu:CopyRegisterToOperand8/>
		<op:AL-BLRegister/>
		
		<cpu:CopyRegisterToOperand/>
		<op:BX-BPAddressPlusImmediate/>
		<hex>0000009c</hex>
		
		<fpu:ResetFpu/>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>
		
				<!--DeltaRight = Width / Height-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000024</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000020</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
				<!--DeltaRightBlue = Blue / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000050</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>
		
				<!--DeltaRightGreen = Green / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000054</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>
		
				<!--DeltaRightRed = Red / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000058</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
				
				<!--DeltaRightAlpha = Alpha / Height-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000005c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>
		
				<!--if(TopHeight != 0)-->
					<!--DeltaLeft = TopWidth / TopHeight + 1-->
		<fpu:One/>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000030</hex>

		<fpu:DivideST0ByST1/>
		
		<fpu:CopyST0ToFloatAtIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
		<!--Left = Right + DeltaLeft-->		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>
		
					<!--DeltaLeftBlue = TopBlue / TopHeight + 1-->
		<fpu:One/>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000034</hex>

		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000060</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>		
		
					<!--DeltaLeftGreen = TopGreen / TopHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000064</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>		
		
					<!--DeltaLeftRed = TopRed / TopHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000068</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>		
		
					<!--DeltaLeftAlpha = TopAlpha / TopHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000006c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>	
		
					<!--LeftBlue = RightBlue + DeltaLeftBlue-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>
		
					<!--LeftGreen = RightGreen + DeltaLeftGreen-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>
		
					<!--LeftRed = RightRed + DeltaLeftRed-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>
		
					<!--LeftAlpha = RightAlpha + DeltaLeftAlpha-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
		<cpu:WaitForFloatingPointUnit/>
				
					<!--for row = index1.y to index2.y - 1-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000008</hex>
		
		<cpu:WaitForFloatingPointUnit/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000000c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:CopyOperandToRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>0c</hex>
		
		<cpu:SubtractOperandFromRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:PushCXToStack/>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="forEachTopRow2" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="skipDrawTop2" type="Relative32"/>

		<label id="forEachTopRow2"/>
						<!--FillTriangleRow(row, Left, Right)-->
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>
		
						<!--Left += DeltaLeft;-->
		<fpu:ResetFpu/>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>
		
						<!--Right += DeltaRight;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

						<!--LeftBlue += DeltaLeftBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

						<!--LeftGreen += DeltaLeftGreen;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

						<!--LeftRed += DeltaLeftRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

						<!--LeftAlpha += DeltaLeftAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
						<!--RightBlue += DeltaRightBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

						<!--RightGreen += DeltaRightGreen;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

						<!--RightRed += DeltaRightRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

						<!--RightAlpha += DeltaRightAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<cpu:WaitForFloatingPointUnit/>
		
		<cpu:IncrementFunction/>
		<inc:IncrementBPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:DecrementCX/>

		<cpu:BranchToRelative8IfZero/>
		<addressOf ref="skipDrawTop2" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="forEachTopRow2" type="Relative32"/>

		<label id="skipDrawTop2"/>
		
				<!--if(Top == 0)-->
		<cpu:PullCXFromStack/>

		<cpu:BranchToRelative8IfCXIsZero/>
		<addressOf ref="setLeft" type="Relative8"/>

		<cpu:JumpToRelative8/>
		<addressOf ref="drawRow2" type="Relative8"/>
		
					<!--Left = index2.x-->
		<label id="setLeft"/>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>14</hex>

		<cpu:CopyOperandToRegister/>
		<op:AX-AXAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>40</hex>
		
				<!--FillTriangleRow(index2.y, Left, Right)-->
		<label id="drawRow2"/>
		
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>

				<!--if(Bottom != 0)-->
					<!--DeltaLeft= BottomWidth / BottomHeight + 1-->
		<fpu:ResetFpu/>
		
		<fpu:One/>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000003c</hex>

		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000038</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
					<!--DeltaLeftBlue = BottomBlue / BottomHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000070</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>		
		
					<!--DeltaLeftGreen = BottomGreen / BottomHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000074</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>		
		
					<!--DeltaLeftRed = BottomRed / BottomHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000078</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>		
		
					<!--DeltaLeftAlpha = BottomAlpha / BottomHeight + 1-->
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000007c</hex>
		
		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>	
		
		<cpu:WaitForFloatingPointUnit/>
		
					<!--for row = index2.y + 1 to index3.y-->		
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>1c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<hex>18</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000000c</hex>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:CopyOperandToRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>0c</hex>
		
		<cpu:SubtractOperandFromRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>08</hex>

		<cpu:BranchToRelative8IfNotZero/>
		<addressOf ref="forEachBottomRow2" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="skipDrawBottom2" type="Relative32"/>
		
		<label id="forEachBottomRow2"/>
		
						<!--Left += DeltaLeft;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000048</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>
		
						<!--Right += DeltaRight;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000004c</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

						<!--LeftBlue += DeltaLeftBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

						<!--LeftGreen += DeltaLeftGreen;-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

						<!--LeftRed += DeltaLeftRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000a8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

						<!--LeftAlpha += DeltaLeftAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ac</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>
		
						<!--RightBlue += DeltaRightBlue;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>

						<!--RightGreen += DeltaRightGreen;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>

						<!--RightRed += DeltaRightRed;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000b8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>

						<!--RightAlpha += DeltaRightAlpha;-->				
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000bc</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>

		<cpu:WaitForFloatingPointUnit/>
		
		<cpu:IncrementFunction/>
		<inc:IncrementBPAddressPlusImmediate8/>
		<hex>08</hex>

						<!--FillTriangleRow(row, Left, Right)-->
		<cpu:CallRelative/>
		<addressOf ref="fillTriangleRow" type="Relative32"/>

		<cpu:DecrementCX/>

		<cpu:BranchToRelative8IfZero/>
		<addressOf ref="skipDrawBottom2" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="forEachBottomRow2" type="Relative32"/>

		<label id="skipDrawBottom2"/>
		
		<cpu:ReturnToNearCaller/>
	</label>
	
	<label id="fillTriangleRow">
		<cpu:PushCXToStack/>
		
		<!--Get Left-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000040</hex>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000000</hex>
		
		<!--Get Right-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000044</hex>

		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>00000004</hex>

		<cpu:WaitForFloatingPointUnit/>
		
		<!--Get Count-->
		<cpu:CopyOperandToRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>04</hex>
		
		<cpu:SubtractOperandFromRegister/>
		<op:CX-BPAddressPlusImmediate8/>
		<hex>00</hex>

		<cpu:IncrementCX/>

		<cpu:MathImmediateToOperandFunction/>
		<math:CompareWithCXRegister/>
		<int>0</int>

		<cpu:BranchToRelative8IfGreater/>
		<addressOf ref="notEmpty" type="Relative8"/>
		
		<cpu:PullCXFromStack/>
		
		<cpu:ReturnToNearCaller/>
		
		<label id="notEmpty"/>

		<cpu:CopyRegisterToOperand/>
		<op:CX-BPAddressPlusImmediate/>
		<hex>000000fc</hex>
		
		<!--Get Start-->
		<cpu:CopyOperandToRegister/>
		<op:DI-BPAddressPlusImmediate/>
		<hex>000000f0</hex>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000f4</hex>
		
		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:DX-DXRegister/>
		
		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBPAddressPlusImmediate8/>
		<hex>08</hex>
		
		<cpu:AddOperandToRegister/>
		<op:AX-BPAddressPlusImmediate8/>
		<hex>00</hex>
		
		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterLeft/>
		<byte>2</byte>
		
		<cpu:AddRegisterToOperand/>
		<op:AX-DIRegister/>
		
		<!--Get Color-->
		<!--<cpu:CopyImmediateToAX/>
		<hex>ffff0000</hex>
		
		<cpu:Repeat/>
		<cpu:CopyAXToDIAddressAndIncrementDI/>-->
		
		<!--Blue-->
		<fpu:ResetFpu/>
		
		<fpu:PushIntegerAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000fc</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000090</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000080</hex>

		<fpu:CopyST0ToFloatAtIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>000000d0</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e0</hex>
		
		<!--Green-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000094</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000084</hex>

		<fpu:CopyST0ToFloatAtIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>000000d4</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e4</hex>
		
		<!--Red-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000098</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>00000088</hex>

		<fpu:CopyST0ToFloatAtIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>000000d8</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e8</hex>
		
		<!--Alpha-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000009c</hex>
		
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>0000008c</hex>

		<fpu:CopyST0ToFloatAtIndexAddress/>
		<index:BPPlusImmediate32/>
		<hex>000000dc</hex>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:DivideST0ByST1/>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ec</hex>

		<cpu:WaitForFloatingPointUnit/>

		<label id="drawPixel"/>
		
		<fpu:ResetFpu/>
		
		<!--Blue-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d0</hex>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000c0</hex>
		
		<!--Green-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d4</hex>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000c4</hex>
		
		<!--Red-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d8</hex>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000c8</hex>
		
		<!--Alpha-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000dc</hex>
		
		<fpu:PullIntegerAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000cc</hex>

		<cpu:WaitForFloatingPointUnit/>
		
		<!--Blue-->
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000c0</hex>

		<cpu:CopyALToDIAddressAndIncrementDI/>
		
		<!--Green-->
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000c4</hex>

		<cpu:CopyALToDIAddressAndIncrementDI/>
		
		<!--Red-->
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000c8</hex>

		<cpu:CopyALToDIAddressAndIncrementDI/>
		
		<!--Alpha-->
		<cpu:CopyOperandToRegister/>
		<op:AX-BPAddressPlusImmediate/>
		<hex>000000cc</hex>
		
		<cpu:CopyALToDIAddressAndIncrementDI/>
		
		<!--Blue-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d0</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e0</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d0</hex>
		
		<!--Green-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d4</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e4</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d4</hex>
		
		<!--Red-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d8</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000e8</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000d8</hex>
		
		<!--Alpha-->
		<fpu:PushFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000dc</hex>
		
		<fpu:AddFloatAtIndexAddressToST0/>
		<index:BPPlusImmediate32/>
		<hex>000000ec</hex>
		
		<fpu:PullFloatAtIndexAddressFromST0/>
		<index:BPPlusImmediate32/>
		<hex>000000dc</hex>
		
		<cpu:WaitForFloatingPointUnit/>

		<cpu:DecrementCX/>

		<cpu:BranchToRelative8IfZero/>
		<addressOf ref="endDrawPixel" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="drawPixel" type="Relative32"/>
		
		<label id="endDrawPixel"/>
		
		<cpu:PullCXFromStack/>
		
		<cpu:ReturnToNearCaller/>
	</label>
</cls:class>