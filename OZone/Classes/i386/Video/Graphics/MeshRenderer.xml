<?xml version="1.0" encoding="utf-8" ?>

<cls:class
	name="MeshRenderer"
	type="http://metalx.org/Video/Graphics/MeshRenderer"
	static="true"
	xmlns="http://metalx.org/Program"
	xmlns:cls="http://metalx.org/Class"
	xmlns:var="http://metalx.org/Variable"
	xmlns:clsf="http://metalx.org/i386/Functions/Class"
	xmlns:sys="http://metalx.org/i386/Functions/System"
	xmlns:cat="http://metalx.org/i386/Functions/Catalog"
	xmlns:obj="http://metalx.org/i386/Functions/Object"
	xmlns:mm="http://metalx.org/i386/Functions/MemoryManager"
	xmlns:bool="http://metalx.org/i386/Functions/Boolean"
	xmlns:str="http://metalx.org/i386/Functions/String"
	xmlns:int="http://metalx.org/i386/Functions/Integer"
	xmlns:hex="http://metalx.org/i386/Functions/Hexadecimal"
	xmlns:con="http://metalx.org/i386/Functions/Console"
	xmlns:math="http://metalx.org/Intel/80386/Math"
	xmlns:ari="http://metalx.org/Intel/80386/Arithmetic"
	xmlns:shift="http://metalx.org/Intel/80386/Shift"
	xmlns:logic="http://metalx.org/Intel/80386/Logic"
	xmlns:imm="http://metalx.org/Intel/80386/Immediate"
	xmlns:index="http://metalx.org/Intel/80386/Index"
	xmlns:fpu="http://metalx.org/Intel/80386/FpuOperators"
	xmlns:cpu="http://metalx.org/Intel/80386/Operators"
	xmlns:op="http://metalx.org/Intel/80386/Operands">

	<cls:field name="PixelRenderer" type="http://metalx.org/Reference" offset="0"/>
	<cls:field name="PixelBuffer" type="http://metalx.org/Reference" offset="4"/>
	<cls:field name="DepthStencilBuffer" type="http://metalx.org/Reference" offset="8"/>
	<cls:field name="VertexBuffer" type="http://metalx.org/Reference" offset="12"/>
	<cls:field name="IndexBuffer" type="http://metalx.org/Reference" offset="16"/>
	<cls:field name="VertexShader" type="http://metalx.org/Reference" offset="20"/>
	<cls:field name="PixelShader" type="http://metalx.org/Reference" offset="24"/>
	<cls:field name="DrawImage" type="http://metalx.org/Hexadecimal" offset="28"/>
	<cls:field name="SetColor" type="http://metalx.org/Hexadecimal" offset="32"/>
	<cls:field name="Point" type="http://metalx.org/Reference" offset="36"/>
	<cls:field name="Viewport" type="http://metalx.org/Video/Graphics/Viewport" offset="40"/>

	<cls:method name="Create" type="http://metalx.org/Video/Graphics/MeshRenderer" static="true">
		<cls:parameter name="PixelRenderer" type="http://metalx.org/Video/Graphics/PixelRenderer"/>

		<mm:CheckOut length="64"/>
		
		<cpu:PushDIToStack/>

		<!--Get Pixel Renderer-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddress/>

		<obj:Create length="64"/>

		<cpu:PushDIToStack/>
		
		<!--Find DrawImage Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<obj:GetType/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="drawImage" type="Absolute32"/>

		<clsf:FindMethod/>

		<clsf:GetMethodEntryPoint/>

		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddressPlusImmediate8/>
		<byte>28</byte>
		
		<!--Create Pixel Buffer-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>
		
		<obj:ExecuteMethod name="GetSize"/>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:PushSIToStack/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:ExclusiveOrRegisterWithOperand/>
		<op:DX-DXRegister/>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByBXRegister/>

		<cpu:AddImmediateToAX/>
		<int>2</int>

		<cpu:ShiftRegisterByImmediate8Function/>
		<shift:ShiftAXRegisterLeft/>
		<byte>2</byte>

		<mm:CheckOut/>

		<obj:Create type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PullSIFromStack/>
		
		<cpu:CopyOperandToRegister/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-AXAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:DI-DIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>

		<!--Find SetColor Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-AXAddressPlusImmediate8/>
		<byte>4</byte>
		
		<obj:GetType/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="setColor" type="Absolute32"/>

		<clsf:FindMethod/>

		<clsf:GetMethodEntryPoint/>
		
		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIAddressPlusImmediate8/>
		<byte>32</byte>
		
		<!--Create Point Object-->
		<mm:CheckOut length="8"/>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToDIAddress/>
		<int>0</int>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToDIAddressPlusImmediate8/>
		<byte>4</byte>
		<int>0</int>

		<obj:Create length="8" type="http://metalx.org/Video/Graphics/Point"/>
		
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>36</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToSPRegister/>
		<byte>4</byte>

		<cls:return/>
	
		<var:string id="setColor">SetColor</var:string>
		<var:string id="drawImage">DrawImage</var:string>
	</cls:method>

	<cls:method name="SetViewport" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Viewport" type="http://metalx.org/Video/Graphics/Viewport"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetRenderState" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="RenderState" type="http://metalx.org/Video/Graphics/RenderState"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetRenderStates" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="RenderStateList" type="http://metalx.org/Video/Graphics/RenderStateList"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTextureState" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="TextureState" type="http://metalx.org/Video/Graphics/TextureState"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTextureStates" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="TextureStateList" type="http://metalx.org/Video/Graphics/TextureStateList"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadTexture" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="texture" type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetTexture" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="texture" type="http://metalx.org/Video/Graphics/Image"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadVertexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexBuffer" type="http://metalx.org/Video/Graphics/VertexBuffer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetVertexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexBuffer" type="http://metalx.org/Video/Graphics/VertexBuffer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadIndexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="indexBuffer" type="http://metalx.org/Video/Graphics/IndexBuffer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetIndexBuffer" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="indexBuffer" type="http://metalx.org/Video/Graphics/IndexBuffer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadGeometryShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="geometryShader" type="http://metalx.org/Video/Graphics/GeometryShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetGeometryShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="geometryShader" type="http://metalx.org/Video/Graphics/VertexShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetGeometryShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadVertexShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexShader" type="http://metalx.org/Video/Graphics/VertexShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetVertexShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="vertexShader" type="http://metalx.org/Video/Graphics/VertexShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetVertexShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="LoadPixelShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="pixelShader" type="http://metalx.org/Video/Graphics/PixelShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetPixelShader" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="pixelShader" type="http://metalx.org/Video/Graphics/PixelShader"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="SetPixelShaderRegister" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="register" type="http://metalx.org/Integer"/>
		<cls:parameter name="value" type="http://metalx.org/Object"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>8</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="DrawTriangles" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Offset" type="http://metalx.org/Integer"/>
		<cls:parameter name="Count" type="http://metalx.org/Integer"/>

		<cpu:PushDIToStack/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>4</byte>

		<cpu:PullDIFromStack/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="Clear" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cls:parameter name="Color" type="http://metalx.org/Video/Graphics/Color"/>
		<cls:parameter name="Depth" type="http://metalx.org/Float"/>
		<cls:parameter name="Stencil" type="http://metalx.org/Integer"/>

		<cpu:PushDIToStack/>

		<!--Set Color-->
		<cpu:CopyOperandToRegister/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>8</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:LogicFunction/>
		<logic:CallSIAddressPlusImmediate8/>
		<byte>32</byte>

		<!--Set Depth-->
		
		<!--Set Stencil-->
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToBPRegister/>
		<byte>12</byte>

		<cpu:PullDIFromStack/>
		
		<cls:return/>
	</cls:method>

	<cls:method name="Update" type="http://metalx.org/Video/Graphics/MeshRenderer">
		<cpu:PushDIToStack/>
		
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddressPlusImmediate8/>
		<byte>0</byte>
		
		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>8</byte>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>4</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddressPlusImmediate8/>
		<byte>36</byte>
		
		<cpu:CopyRegisterToOperand/>
		<op:AX-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<cpu:LogicFunction/>
		<logic:CallSIAddressPlusImmediate8/>
		<byte>28</byte>

		<cpu:PullDIFromStack/>
		
		<cls:return/>
	</cls:method>

	<cls:method name="ToString" type="http://metalx.org/String">
		<cpu:CopyImmediateToDI/>
		<addressOf ref="className" type="Absolute32"/>

		<str:CreateObject/>

		<cpu:ReturnToNearCaller/>

		<var:string id="className">Mesh Renderer</var:string>
	</cls:method>

	<cls:method name="GetClass" type="http://metalx.org/Class">
		<cpu:CopyRegisterToOperand/>
		<op:DI-SIRegister/>

		<obj:GetType/>

		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<clsf:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<cls:method name="GetClass" type="http://metalx.org/Class" static="true">
		<cpu:CopyRegisterToOperand/>
		<op:BX-DIRegister/>

		<clsf:CreateObject/>

		<cpu:ReturnToNearCaller/>
	</cls:method>

	<label id="renderMeshes">
		<cpu:PushSIToStack/>

		<!--Get SetPixel Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>8</byte>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:SI-SIAddress/>

		<obj:GetType/>

		<cpu:CopyImmediateToDI/>
		<addressOf ref="drawPixel" type="Absolute32"/>

		<clsf:FindMethod/>

		<clsf:GetMethodEntryPoint/>

		<cpu:PushSIToStack/>

		<mm:CheckOut length="12"/>

		<obj:Create type="http://metalx.org/Video/Graphics/Pixel" length="12"/>

		<cpu:PushDIToStack/>

		<!--Get Mesh Count-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>8</byte>

		<cpu:CopyOperandToRegister/>
		<op:CX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<cpu:BranchToRelative8IfCXIsZero/>
		<addressOf ref="empty" type="Relative8"/>

		<cpu:JumpToRelative8/>
		<addressOf ref="notEmpty" type="Relative8"/>

		<label id="empty"/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToSPRegister/>
		<byte>12</byte>

		<cpu:ReturnToNearCaller/>

		<label id="notEmpty"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>

		<cpu:ArithmeticDXAXOperandFunction/>
		<ari:MultiplyByImmediateAddress/>
		<addressOf ref="vertexFormatLength" type="Absolute32"/>

		<cpu:AddImmediateToAX/>
		<int>12</int>

		<cpu:CopyRegisterToOperand/>
		<op:AX-SIRegister/>

		<!--Draw Meshes-->
		<label id="nextMesh"/>

		<cpu:PushCXToStack/>

		<cpu:CallRelative/>
		<addressOf ref="renderMesh" type="Relative32"/>

		<cpu:PullCXFromStack/>

		<cpu:LoopToRelative8/>
		<addressOf ref="nextMesh" type="Relative8"/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToSPRegister/>
		<byte>12</byte>

		<cpu:ReturnToNearCaller/>

		<var:string id="drawPixel">DrawPixel</var:string>
		<var:integer id="vertexFormatLength">36</var:integer>
	</label>

	<label id="renderMesh">
		<cpu:MathImmediate8ToOperandFunction/>
		<math:CompareWithSIAddress/>
		<byte>1</byte>

		<cpu:BranchToRelative8IfNotEqual/>
		<addressOf ref="notTriangleList" type="Relative8"/>

		<cpu:JumpToRelative/>
		<addressOf ref="renderTriangleListMesh" type="Relative32"/>

		<label id="notTriangleList"/>

		<cpu:ReturnToNearCaller/>
	</label>

	<label id="renderTriangleListMesh">
		<!--Get Primitive Count-->
		<cpu:CopyOperandToRegister/>
		<op:CX-SIAddressPlusImmediate8/>
		<byte>4</byte>

		<!--Get Index Stride-->
		<cpu:CopyOperandToRegister/>
		<op:BX-SIAddressPlusImmediate8/>
		<byte>16</byte>

		<!--Get Index Buffer-->
		<cpu:CopyOperandToRegister/>
		<op:SI-SIAddressPlusImmediate8/>
		<byte>8</byte>

		<label id="nextPrimitive"/>

		<cpu:PushCXToStack/>

		<!--Get Vertex Formats-->
		<cpu:CopyOperandToRegister/>
		<op:DI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>24</byte>

		<cpu:CopyOperandToRegister/>
		<op:CX-DIAddress/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToDIRegister/>
		<byte>12</byte>

		<label id="nextVertexElement"/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:CompareWithDIAddressPlusImmediate8/>
		<byte>8</byte>
		<byte>0</byte>

		<cpu:BranchToRelative8IfNotEqual/>
		<addressOf ref="notPosition" type="Relative8"/>

		<cpu:CallRelative/>
		<addressOf ref="readPosition" type="Relative32"/>

		<label id="notPosition"/>

		<cpu:LoopToRelative8/>
		<addressOf ref="nextVertexElement" type="Relative8"/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToDIRegister/>
		<byte>36</byte>

		<cpu:PullCXFromStack/>

		<cpu:LoopToRelative8/>
		<addressOf ref="nextPrimitive" type="Relative8"/>

		<cpu:ReturnToNearCaller/>

		<label id="readPosition"/>

		<cpu:PushSIToStack/>
		
		<!--Find Vertex 1-->
		<cpu:CopyOperandToRegister/>
		<op:AX-SIAddress/>
		
		
		
		<cpu:AddRegisterToOperand/>
		<op:BX-SIRegister/>

		<cpu:PullSIFromStack/>

		<cpu:ReturnToNearCaller/>

		<label id="TriangleBuffer"/>
		<float>0.0</float>
		<float>0.0</float>
		<float>0.0</float>
		<float>1.0</float>

		<float>0.0</float>
		<float>0.0</float>
		<float>0.0</float>
		<float>1.0</float>

		<float>0.0</float>
		<float>0.0</float>
		<float>0.0</float>
		<float>1.0</float>
	</label>

	<label id="renderTriangle">
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>8</byte>

		<obj:GetData/>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToSIAddress/>
		<int>512</int>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToSIAddressPlusImmediate8/>
		<byte>4</byte>
		<int>384</int>

		<cpu:CopyImmediateToOperandFunction/>
		<imm:CopyImmediateToSIAddressPlusImmediate8/>
		<byte>8</byte>
		<hex>ff0000ff</hex>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>8</byte>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:SubtractFromBPRegister/>
		<byte>4</byte>

		<cpu:CopyRegisterToOperand/>
		<op:SI-BPAddressPlusImmediate8/>
		<byte>0</byte>

		<!--Call Method-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>24</byte>

		<obj:GetData/>

		<cpu:CopyOperandToRegister/>
		<op:DI-SIAddress/>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<byte>12</byte>

		<cpu:LogicFunction/>
		<logic:CallSIRegister/>

		<cpu:ReturnToNearCaller/>
	</label>

	<label id="drawTriangle">
		<!--if(VertexShader != null)-->
			<!--TransformVertices-->

		<fpu:ResetFpu/>

		<!--SortVertices (Index1, Index2)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotGreater/>
		<addressOf ref="skipSwap1" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<label id="skipSwap1"/>
		
		<!--SortVertices (Index2, Index3)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>18</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotGreater/>
		<addressOf ref="skipSwap2" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>18</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>18</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<label id="skipSwap2"/>
		
		<!--SortVertices (Index1, Index2)-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:CompareST1ToST0AndSetCpuFlags/>

		<cpu:WaitForFloatingPointUnit/>

		<cpu:BranchToRelative8IfNotGreater/>
		<addressOf ref="skipSwap3" type="Relative8"/>

		<cpu:CopyOperandToRegister/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<cpu:CopyOperandToRegister/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:AX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<cpu:CopyRegisterToOperand/>
		<op:BX-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<label id="skipSwap3"/>

		<!--Height = index3.y - index1.y-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>18</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressPlusImmediate8FromST0/>
		<index:SP/>
		<hex>20</hex>
		
		<!--if(Height != 0)-->
		
			<!--Top = index2.y - index1.y-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>10</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressPlusImmediate8FromST0/>
		<index:SP/>
		<hex>24</hex>
		
			<!--Bottom = index3.y - index2.y-->
		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>18</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<cpu:CopyOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>0c</hex>

		<cpu:AddOperandToRegister/>
		<op:SI-IndexAddressPlusImmediate8/>
		<index:SP/>
		<hex>14</hex>

		<fpu:PushFloatAtSIAddressPlusImmediate8ToST0/>
		<byte>4</byte>

		<fpu:SubtractST0FromST1AndIncrementST/>

		<fpu:PullFloatAtIndexAddressPlusImmediate8FromST0/>
		<index:SP/>
		<hex>28</hex>

		<!--RightHanded = CalculateArea() > 0-->
		
			<!--if(RightHanded)-->
				<!--Left = index1.x-->
				<!--DeltaLeft = (index3.x - index1.x) / Height-->
		
				<!--if(Top != 0)-->
					<!--Right = index1.x-->
					<!--DeltaRight = (index2.x - index1.x) / Top-->
		
					<!--for row = index1.y to index2.y - 1-->
						<!--FillTriangleRow(row, Left, Right)-->
						<!--Left += DeltaLeft;-->
						<!--Right += DeltaRight;-->				

				<!--if(Top == 0)-->
					<!--Right = index2.x-->

				<!--FillTriangleRow(index2.y, Left, Right)-->

				<!--if(Bottom != 0)-->
					<!--DeltaRight = (index3.x - index2.x) / Bottom-->
					<!--for row = index2.y + 1 to index3.y-->
						<!--Left += DeltaLeft;-->
						<!--Right += DeltaRight;-->
						<!--FillTriangleRow(row, Left, Right)-->

			<!--else-->
				<!--Right = index1.x-->
		
				<!--DeltaRight = (index3.x - index1.x) / Height-->
		
				<!--if(Top != 0)-->
					<!--Left = index1.x-->
					<!--DeltaLeft = (index2.x - index1.x) / Top-->
		
					<!--for row = index1.y to index2.y - 1-->
						<!--FillTriangleRow(row, Left, Right)-->
						<!--Left += DeltaLeft;-->
						<!--Right += DeltaRight;-->				

				<!--if(Top == 0)-->
					<!--Left = index2.x-->

				<!--FillTriangleRow(index2.y, Left, Right)-->

				<!--if(Bottom != 0)-->
					<!--DeltaLeft = (index3.x - index2.x) / Bottom-->
		
					<!--for row = index2.y + 1 to index3.y-->
						<!--Left += DeltaLeft;-->
						<!--Right += DeltaRight;-->
						<!--FillTriangleRow(row, Left, Right)-->
	</label>
	
	<label id="drawLine">
		<!--Get Start-->
	
		<!--Get End-->
	
		<!--Get Length-->
		<cpu:CopyImmediateToCX/>
		<int>100</int>
	
		<!--Calculate Deltas-->

		<cpu:PushSIToStack/>
		
		<cpu:CopyRegisterToOperand/>
		<op:SI-DIRegister/>

		<cpu:MathImmediate8ToOperandFunction/>
		<math:AddToDIRegister/>
		<byte>28</byte>
		
		<label id="forEachPixel"/>
			
		<!--Add Deltas-->
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>

		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>

		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>
		<cpu:CopySIAddressToDIAddressAndIncrementSIAndDI/>

		<cpu:LoopToRelative8/>
		<addressOf ref="forEachPixel" type="Relative8"/>

		<cpu:PullSIFromStack/>

		<!--Get Pixel Shader-->

		<!--Call Draw Pixels-->
	</label>
</cls:class>